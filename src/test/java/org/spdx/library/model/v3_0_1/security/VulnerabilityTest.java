/**
 * Copyright (c) 2024 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.v3_0_1.security;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.spdx.core.CoreModelObject;
import org.spdx.core.DefaultModelStore;
import org.spdx.core.InvalidSPDXAnalysisException;
import org.spdx.core.IModelCopyManager;
import org.spdx.core.IndividualUriValue;
import org.spdx.library.model.v3_0_1.ModelObjectV3;
import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;
import org.spdx.storage.IModelStore.IModelStoreLock;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;
import java.util.Optional;
import java.util.regex.Pattern;
import junit.framework.TestCase;
import org.spdx.core.ModelRegistry;
import org.spdx.library.model.v3_0_1.MockCopyManager;
import org.spdx.library.model.v3_0_1.MockModelStore;
import org.spdx.library.model.v3_0_1.SpdxConstantsV3;
import org.spdx.library.model.v3_0_1.SpdxModelInfoV3_0;
import org.spdx.library.model.v3_0_1.TestValuesGenerator;
import org.spdx.library.model.v3_0_1.UnitTestHelper;
import org.spdx.library.model.v3_0_1.core.Agent.AgentBuilder;
import org.spdx.library.model.v3_0_1.core.Agent;
import org.spdx.library.model.v3_0_1.core.Artifact;
import org.spdx.library.model.v3_0_1.core.CreationInfo;
import org.spdx.library.model.v3_0_1.core.Element;
import org.spdx.library.model.v3_0_1.core.ExternalIdentifier;
import org.spdx.library.model.v3_0_1.core.ExternalRef;
import org.spdx.library.model.v3_0_1.core.IntegrityMethod;
import org.spdx.library.model.v3_0_1.core.ProfileIdentifierType;
import org.spdx.library.model.v3_0_1.core.SupportType;
import org.spdx.library.model.v3_0_1.extension.Extension;
import org.spdx.library.model.v3_0_1.security.Vulnerability.VulnerabilityBuilder;

/**
 * GENERATED FILE - DO NOT MODIFY
**/

public class VulnerabilityTest extends TestCase {

	static final String TEST_OBJECT_URI = "https://test.uri/testuri";
	
	TestValuesGenerator generator;
	
	protected void setUp() throws Exception {
		super.setUp();
		generator = new TestValuesGenerator(new MockModelStore(), new MockCopyManager());
	}

	protected void tearDown() throws Exception {
		super.tearDown();
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#verify()}.
	 * @throws InvalidSPDXAnalysisException on errors
	 */
	public void testVerify() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
		List<String> result = testVulnerability.verify();
		assertTrue(result.isEmpty());
		// TODO - add negative tests
	}

	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#getType()}.
	 */
	public void testGetType() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
		assertEquals("Security.Vulnerability", testVulnerability.getType());
	}

	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#Element(org.spdx.library.model.v3_0_1.security.Vulnerability.VulnerabilityBuilder)}.
	 */
	public void testVulnerabilityVulnerabilityBuilder() throws InvalidSPDXAnalysisException {
		generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
	}
	
	public void testEquivalent() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
		Vulnerability test2Vulnerability = generator.builderForVulnerabilityTests("https://testObject2").build();
		assertTrue(testVulnerability.equivalent(test2Vulnerability));
		assertTrue(test2Vulnerability.equivalent(testVulnerability));
		// TODO change some parameters for negative tests
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#setCreationInfo}.
	 */
	public void testVulnerabilitysetCreationInfo() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
//		assertEquals(TEST_VALUE, testVulnerability.getCreationInfo());
//		testVulnerability.setCreationInfo(NEW_TEST_VALUE);
//		assertEquals(NEW_TEST_VALUE, testVulnerability.getCreationInfo());
		//TODO: Implement
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#setSuppliedBy}.
	 */
	public void testVulnerabilitysetSuppliedBy() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
//		assertEquals(Optional.of(TEST_VALUE), testVulnerability.getSuppliedBy());
//		testVulnerability.setSuppliedBy(NEW_TEST_VALUE);
//		assertEquals(Optional.of(NEW_TEST_VALUE), testVulnerability.getSuppliedBy());
		//TODO: Implement
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#setPublishedTime}.
	 */
	public void testVulnerabilitysetPublishedTime() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
		assertEquals(Optional.of(TestValuesGenerator.PUBLISHED_TIME_TEST_VALUE), testVulnerability.getPublishedTime());
		String newStringValue = UnitTestHelper.genRandPattern("^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\dZ$");
		testVulnerability.setPublishedTime(newStringValue);
		assertEquals(Optional.of(newStringValue), testVulnerability.getPublishedTime());
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#setValidUntilTime}.
	 */
	public void testVulnerabilitysetValidUntilTime() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
		assertEquals(Optional.of(TestValuesGenerator.VALID_UNTIL_TIME_TEST_VALUE), testVulnerability.getValidUntilTime());
		String newStringValue = UnitTestHelper.genRandPattern("^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\dZ$");
		testVulnerability.setValidUntilTime(newStringValue);
		assertEquals(Optional.of(newStringValue), testVulnerability.getValidUntilTime());
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#setBuiltTime}.
	 */
	public void testVulnerabilitysetBuiltTime() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
		assertEquals(Optional.of(TestValuesGenerator.BUILT_TIME_TEST_VALUE), testVulnerability.getBuiltTime());
		String newStringValue = UnitTestHelper.genRandPattern("^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\dZ$");
		testVulnerability.setBuiltTime(newStringValue);
		assertEquals(Optional.of(newStringValue), testVulnerability.getBuiltTime());
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#setSummary}.
	 */
	public void testVulnerabilitysetSummary() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
		assertEquals(Optional.of(TestValuesGenerator.SUMMARY_TEST_VALUE), testVulnerability.getSummary());
		String newStringValue = "new summary value";
		testVulnerability.setSummary(newStringValue);
		assertEquals(Optional.of(newStringValue), testVulnerability.getSummary());
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#setDescription}.
	 */
	public void testVulnerabilitysetDescription() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
		assertEquals(Optional.of(TestValuesGenerator.DESCRIPTION_TEST_VALUE), testVulnerability.getDescription());
		String newStringValue = "new description value";
		testVulnerability.setDescription(newStringValue);
		assertEquals(Optional.of(newStringValue), testVulnerability.getDescription());
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#setReleaseTime}.
	 */
	public void testVulnerabilitysetReleaseTime() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
		assertEquals(Optional.of(TestValuesGenerator.RELEASE_TIME_TEST_VALUE), testVulnerability.getReleaseTime());
		String newStringValue = UnitTestHelper.genRandPattern("^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\dZ$");
		testVulnerability.setReleaseTime(newStringValue);
		assertEquals(Optional.of(newStringValue), testVulnerability.getReleaseTime());
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#setWithdrawnTime}.
	 */
	public void testVulnerabilitysetWithdrawnTime() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
		assertEquals(Optional.of(TestValuesGenerator.WITHDRAWN_TIME_TEST_VALUE), testVulnerability.getWithdrawnTime());
		String newStringValue = UnitTestHelper.genRandPattern("^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\dZ$");
		testVulnerability.setWithdrawnTime(newStringValue);
		assertEquals(Optional.of(newStringValue), testVulnerability.getWithdrawnTime());
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#setComment}.
	 */
	public void testVulnerabilitysetComment() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
		assertEquals(Optional.of(TestValuesGenerator.COMMENT_TEST_VALUE), testVulnerability.getComment());
		String newStringValue = "new comment value";
		testVulnerability.setComment(newStringValue);
		assertEquals(Optional.of(newStringValue), testVulnerability.getComment());
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#setName}.
	 */
	public void testVulnerabilitysetName() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
		assertEquals(Optional.of(TestValuesGenerator.NAME_TEST_VALUE), testVulnerability.getName());
		String newStringValue = "new name value";
		testVulnerability.setName(newStringValue);
		assertEquals(Optional.of(newStringValue), testVulnerability.getName());
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#setModifiedTime}.
	 */
	public void testVulnerabilitysetModifiedTime() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
		assertEquals(Optional.of(TestValuesGenerator.MODIFIED_TIME_TEST_VALUE), testVulnerability.getModifiedTime());
		String newStringValue = UnitTestHelper.genRandPattern("^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\dZ$");
		testVulnerability.setModifiedTime(newStringValue);
		assertEquals(Optional.of(newStringValue), testVulnerability.getModifiedTime());
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#getExtension}.
	 */
	public void testVulnerabilitygetExtensions() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
//		assertTrue(UnitTestHelper.isListsEquivalent(TEST_VALUE, new ArrayList<>(testVulnerability.getExtensions())));
//		testVulnerability.getExtensions().clear();
//		testVulnerability.getExtensions().addAll(NEW_TEST_VALUE);
//		assertTrue(UnitTestHelper.isListsEquivalent(NEW_TEST_VALUE, new ArrayList<>(testVulnerability.getExtensions())));
		//TODO: Implement
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#getVerifiedUsing}.
	 */
	public void testVulnerabilitygetVerifiedUsings() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
//		assertTrue(UnitTestHelper.isListsEquivalent(TEST_VALUE, new ArrayList<>(testVulnerability.getVerifiedUsings())));
//		testVulnerability.getVerifiedUsings().clear();
//		testVulnerability.getVerifiedUsings().addAll(NEW_TEST_VALUE);
//		assertTrue(UnitTestHelper.isListsEquivalent(NEW_TEST_VALUE, new ArrayList<>(testVulnerability.getVerifiedUsings())));
		//TODO: Implement
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#getOriginatedBy}.
	 */
	public void testVulnerabilitygetOriginatedBys() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
//		assertTrue(UnitTestHelper.isListsEquivalent(TEST_VALUE, new ArrayList<>(testVulnerability.getOriginatedBys())));
//		testVulnerability.getOriginatedBys().clear();
//		testVulnerability.getOriginatedBys().addAll(NEW_TEST_VALUE);
//		assertTrue(UnitTestHelper.isListsEquivalent(NEW_TEST_VALUE, new ArrayList<>(testVulnerability.getOriginatedBys())));
		//TODO: Implement
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#getExternalRef}.
	 */
	public void testVulnerabilitygetExternalRefs() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
//		assertTrue(UnitTestHelper.isListsEquivalent(TEST_VALUE, new ArrayList<>(testVulnerability.getExternalRefs())));
//		testVulnerability.getExternalRefs().clear();
//		testVulnerability.getExternalRefs().addAll(NEW_TEST_VALUE);
//		assertTrue(UnitTestHelper.isListsEquivalent(NEW_TEST_VALUE, new ArrayList<>(testVulnerability.getExternalRefs())));
		//TODO: Implement
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#getExternalIdentifier}.
	 */
	public void testVulnerabilitygetExternalIdentifiers() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
//		assertTrue(UnitTestHelper.isListsEquivalent(TEST_VALUE, new ArrayList<>(testVulnerability.getExternalIdentifiers())));
//		testVulnerability.getExternalIdentifiers().clear();
//		testVulnerability.getExternalIdentifiers().addAll(NEW_TEST_VALUE);
//		assertTrue(UnitTestHelper.isListsEquivalent(NEW_TEST_VALUE, new ArrayList<>(testVulnerability.getExternalIdentifiers())));
		//TODO: Implement
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#getStandardNames}.
	 */
	public void testVulnerabilitygetStandardNames() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
		assertTrue(UnitTestHelper.isListsEqual(TestValuesGenerator.STANDARD_NAME_TEST_LIST1, new ArrayList<>(testVulnerability.getStandardNames())));
		testVulnerability.getStandardNames().clear();
		testVulnerability.getStandardNames().addAll(TestValuesGenerator.STANDARD_NAME_TEST_LIST2);
		assertTrue(UnitTestHelper.isListsEqual(TestValuesGenerator.STANDARD_NAME_TEST_LIST2, new ArrayList<>(testVulnerability.getStandardNames())));
	}
	
	/**
	 * Test method for {@link org.spdx.library.model.v3_0_1.security.Vulnerability#getSupportLevel}.
	 */
	public void testVulnerabilitygetSupportLevels() throws InvalidSPDXAnalysisException {
		Vulnerability testVulnerability = generator.builderForVulnerabilityTests(TEST_OBJECT_URI).build();
		assertTrue(UnitTestHelper.isListsEqual(TestValuesGenerator.SUPPORT_LEVEL_TEST_LIST1, new ArrayList<>(testVulnerability.getSupportLevels())));
		testVulnerability.getSupportLevels().clear();
		testVulnerability.getSupportLevels().addAll(TestValuesGenerator.SUPPORT_LEVEL_TEST_LIST2);
		assertTrue(UnitTestHelper.isListsEqual(TestValuesGenerator.SUPPORT_LEVEL_TEST_LIST2, new ArrayList<>(testVulnerability.getSupportLevels())));
	}
}